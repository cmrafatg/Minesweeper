#BlueJ class context
comment0.target=UI
comment0.text=\n\ This\ class\ provides\ a\ text-based\ user\ interface\ for\ the\ player\ to\ interact\ with\ the\ game.\n\ @author\ Lauren\ Scott\n\ @version\ student\ sample\ code\n
comment1.params=
comment1.target=UI()
comment1.text=\n\ Constructor\ for\ the\ class\ UI\n
comment10.params=
comment10.target=void\ loadGame()
comment10.text=\n\ loadGame\n\ To\ be\ implemented\ by\ student\ -\ this\ method\ should\ load\ a\ previous\ saved\ game\n\ This\ method\ is\ similar\ with\ the\ saveGame\ one\ but\ this\ one\ goes\ through\ each\ row\ in\ the\ file\ and\ reads\ the\ states\n\ These\ states\ are\ then\ assigned\ to\ their\ respective\ cells\ based\ on\ their\ position\ in\ the\ file\n\ It\ also\ keeps\ track\ of\ the\ number\ of\ rows\ that\ were\ read\ so\ it\ matches\ the\ size\ of\ the\ board\ game\n\ Depending\ on\ the\ success\ of\ the\ function\ a\ message\ is\ displayed\ to\ inform\ the\ user\n
comment11.params=
comment11.target=void\ clearGame()
comment11.text=\n\ clearGame\n\ To\ be\ implemented\ by\ student\ -\ this\ method\ should\ clear\ the\ game\ board\ and\ any\ record\ of\ moves,\ to\ reset\ the\ game\n\ The\ method\ creates\ a\ double\ loop\ to\ go\ through\ each\ cell\ of\ the\ board\ and\ resets\ the\ states\ of\ them\ to\ the\ initial\ value\n\ The\ stack\ of\ moves\ is\ also\ cleared\ followed\ by\ a\ success\ message.\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\n\ The\ main\ method\ within\ the\ Java\ application.\ \n\ It's\ the\ core\ method\ of\ the\ program\ and\ calls\ all\ others.\n
comment13.params=lastMove\ row\ col
comment13.target=boolean\ isSameMove(int[],\ int,\ int)
comment13.text=\n\ Method\ to\ check\ if\ the\ current\ move\ is\ the\ same\ as\ the\ previous\ move\n\ @param\ lastMove\ The\ last\ move\ made\n\ @param\ row\ The\ row\ of\ the\ current\ move\n\ @param\ col\ The\ column\ of\ the\ current\ move\n\ @return\ true\ if\ the\ current\ move\ is\ the\ same\ as\ the\ last\ move,\ false\ otherwise\n
comment2.params=
comment2.target=void\ winningAnnouncement()
comment2.text=\n\ Method\ that\ outputs\ an\ announcement\ when\ the\ user\ has\ won\ the\ game\n
comment3.params=
comment3.target=void\ livesAnnouncement()
comment3.text=\n\ Method\ that\ outputs\ an\ announcement\ when\ the\ user\ has\ lost\ due\ to\ lack\ of\ lives\n
comment4.params=
comment4.target=void\ displayGame()
comment4.text=\n\ Method\ that\ displays\ the\ game\ for\ the\ user\ to\ play\n
comment5.params=
comment5.target=void\ menu()
comment5.text=\n\ Method\ that\ displays\ the\ menu\ to\ the\ user\n
comment6.params=
comment6.target=java.lang.String\ getChoice()
comment6.text=\n\ Method\ that\ gets\ the\ user's\ choice\ from\ the\ menu\ and\ conducts\ the\ activities\ accordingly\n\ @return\ the\ choice\ the\ user\ has\ selected\n
comment7.params=type
comment7.target=int\ getValidCoordinate(java.lang.String)
comment7.text=\n\ Method\ to\ get\ a\ valid\ row\ or\ column\ coordinate\ from\ the\ user.\n\ @param\ type\ The\ type\ of\ coordinate\ to\ get\ (either\ "row"\ or\ "column").\n\ @return\ The\ valid\ coordinate,\ or\ -1\ if\ invalid.\n
comment8.params=
comment8.target=void\ saveGame()
comment8.text=\n\ This\ method\ deals\ with\ saving\ the\ current\ board\ to\ a\ certain\ file.\ \n\ It\ accomplishes\ this\ by\ going\ through\ each\ cell\ starting\ from\ the\ left\ on\ the\ first\ row\ and\ writing\ \n\ its\ state\ to\ the\ file\ leaving\ an\ empty\ space\ between\ them.\ Once\ a\ row\ is\ complete\ it\ moves\ \n\ onto\ the\ next\ one,\ this\ helps\ keeping\ the\ position\ of\ the\ cells\ saved\ as\ well\ without\ any\ \n\ additional\ data.\ \n\ Once\ it\ finishes\ if\ it\ is\ successful,\ it\ outputs\ a\ message\ to\ the\ user.\n
comment9.params=
comment9.target=void\ undoMove()
comment9.text=\n\ undoMove\ \n\ This\ \u2018undoMove\u2019\ method\ was\ created\ to\ allow\ the\ user\ to\ reverse\ their\ last\ move\ during\ the\ game.\ \n\ While\ the\ user\ is\ playing\ the\ game\ each\ move,\ they\ make\ is\ added\ onto\ a\ stack.\ \n\ A\ stack\ is\ a\ dynamic\ data\ structure\ that\ follows\ the\ last\ in\ first\ out\ principle,\ which\ means\ the\ last\ move\ will\ always\ \n\ be\ on\ the\ top.\ This\ allows\ us\ to\ remove\ the\ last\ move\ from\ the\ stack\ and\ reset\ the\ state\ of\ that\ cell\ to\ the\ initial\ value\ \n\ which\ is\ \u201C\u201D.\ After\ all\ of\ this\ is\ executed\ successfully\ a\ message\ is\ sent\ to\ the\ user,\ once\ there\ are\ no\ more\ items\ in\ the\ \n\ stack,\ the\ user\ gets\ an\ appropriate\ message.\n
numComments=14
